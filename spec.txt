=====================================
SEPIA Resource Collection Planner
STRIPS-like Specification
Author: Furkan Günbaz
ID: <numaran>
=====================================

1. STATE VARIABLES
------------------
PeasantLocation ∈ {Townhall, Mine1, Mine2, Mine3, Forest1, Forest2, Forest3, Forest4, Forest5}
PeasantCargoType ∈ {None, Gold, Wood}
PeasantCargoAmount ∈ {0, 100}
GoldInTownhall ∈ ℕ
WoodInTownhall ∈ ℕ

For each resource node:
Mine1RemainingGold ∈ {0,100,...}
Mine2RemainingGold ∈ {0,100,...}
Mine3RemainingGold ∈ {0,100,...}
Forest1RemainingWood ∈ {0,100,...}
Forest2RemainingWood ∈ {0,100,...}
Forest3RemainingWood ∈ {0,100,...}
Forest4RemainingWood ∈ {0,100,...}
Forest5RemainingWood ∈ {0,100,...}

INITIAL VALUES
--------------
PeasantLocation = Townhall
PeasantCargoType = None
PeasantCargoAmount = 0
GoldInTownhall = 0
WoodInTownhall = 0

Mine1RemainingGold = 100
Mine2RemainingGold = 500
Mine3RemainingGold = 5000

Forest1RemainingWood = 400
Forest2RemainingWood = 400
Forest3RemainingWood = 400
Forest4RemainingWood = 400
Forest5RemainingWood = 400

GOAL STATE
-----------
Goal(a): GoldInTownhall ≥ 200 AND WoodInTownhall ≥ 200
Goal(b): GoldInTownhall ≥ 1000 AND WoodInTownhall ≥ 1000
(For part 1 of the assignment, we use these two goal configurations.)

2. ACTION DEFINITIONS
---------------------

ACTION: Move(X, Y)
------------------
Intuition:
Peasant walks from location X to location Y.

Preconditions:
- PeasantLocation == X

Effects:
- PeasantLocation := Y

Delete list:
- PeasantLocation == X

Add list:
- PeasantLocation == Y

Cost:
- 1   (We approximate move cost as 1 step)

We will allow X,Y ∈ {Townhall, Mine1, Mine2, Mine3, Forest1, Forest2, Forest3, Forest4, Forest5}
(X != Y)

--------------------------------

ACTION: HarvestGold(MineK)
--------------------------
Intuition:
Peasant mines 100 gold from MineK and holds it.

Preconditions:
- PeasantLocation == MineK
- PeasantCargoType == None
- MineKRemainingGold ≥ 100

Effects:
- PeasantCargoType := Gold
- PeasantCargoAmount := 100
- MineKRemainingGold := MineKRemainingGold - 100

Delete list:
- PeasantCargoType == None
- PeasantCargoAmount == 0
- (old value of MineKRemainingGold)

Add list:
- PeasantCargoType == Gold
- PeasantCargoAmount == 100
- (updated MineKRemainingGold)

Cost:
- 1

--------------------------------

ACTION: HarvestWood(ForestJ)
----------------------------
Intuition:
Peasant chops 100 wood from ForestJ and holds it.

Preconditions:
- PeasantLocation == ForestJ
- PeasantCargoType == None
- ForestJRemainingWood ≥ 100

Effects:
- PeasantCargoType := Wood
- PeasantCargoAmount := 100
- ForestJRemainingWood := ForestJRemainingWood - 100

Delete list:
- PeasantCargoType == None
- PeasantCargoAmount == 0
- (old value of ForestJRemainingWood)

Add list:
- PeasantCargoType == Wood
- PeasantCargoAmount == 100
- (updated ForestJRemainingWood)

Cost:
- 1

--------------------------------

ACTION: DepositGold
-------------------
Intuition:
Peasant delivers carried gold to Townhall.

Preconditions:
- PeasantLocation == Townhall
- PeasantCargoType == Gold
- PeasantCargoAmount == 100  (i.e. carrying gold)

Effects:
- GoldInTownhall := GoldInTownhall + 100
- PeasantCargoType := None
- PeasantCargoAmount := 0

Delete list:
- PeasantCargoType == Gold
- PeasantCargoAmount == 100

Add list:
- PeasantCargoType == None
- PeasantCargoAmount == 0
- (updated GoldInTownhall)

Cost:
- 1

--------------------------------

ACTION: DepositWood
-------------------
Intuition:
Peasant delivers carried wood to Townhall.

Preconditions:
- PeasantLocation == Townhall
- PeasantCargoType == Wood
- PeasantCargoAmount == 100

Effects:
- WoodInTownhall := WoodInTownhall + 100
- PeasantCargoType := None
- PeasantCargoAmount := 0

Delete list:
- PeasantCargoType == Wood
- PeasantCargoAmount == 100

Add list:
- PeasantCargoType == None
- PeasantCargoAmount == 0
- (updated WoodInTownhall)

Cost:
- 1

3. SEARCH PROBLEM
-----------------
We perform forward state-space search using A*.

- Initial node = INITIAL STATE above.
- Goal test = "GoldInTownhall ≥ RequiredGold AND WoodInTownhall ≥ RequiredWood".
  For part (a): RequiredGold=200, RequiredWood=200.
  For part (b): RequiredGold=1000, RequiredWood=1000.

- Successor function:
  From a state, generate all applicable grounded actions:
  - All legal Move(X,Y)
  - All legal HarvestGold(MineK)
  - All legal HarvestWood(ForestJ)
  - DepositGold if applicable
  - DepositWood if applicable

- Step cost:
  cost(action) = 1 for now.

- Heuristic h(state):
  We will design h to estimate how many 100-chunk trips remain to reach the goal.
  (We'll implement this in Planner.java.)
